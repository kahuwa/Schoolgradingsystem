// <auto-generated />
using System;
using GradingSystems.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GradingSystems.Migrations
{
    [DbContext(typeof(SchoolgradingsystemContext))]
    [Migration("20230420132403_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GradingSystems.Models.CriteriaToSubmission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer")
                        .HasColumnName("submission_id");

                    b.Property<int>("CriteriaId")
                        .HasColumnType("integer")
                        .HasColumnName("criteria_id");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.Property<string>("CommentTeacher")
                        .HasColumnType("character varying")
                        .HasColumnName("comment_teacher");

                    b.Property<int?>("Grade")
                        .HasColumnType("integer")
                        .HasColumnName("grade");

                    b.HasKey("SubmissionId", "CriteriaId", "TeacherId")
                        .HasName("criteria_to_submissions_pkey");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("TeacherId");

                    b.ToTable("criteria_to_submissions", "gradingsystem");
                });

            modelBuilder.Entity("GradingSystems.Models.Criterion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("criteria");

                    b.HasKey("Id");

                    b.ToTable("criteria", "gradingsystem");
                });

            modelBuilder.Entity("GradingSystems.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Roletype")
                        .HasColumnType("character varying")
                        .HasColumnName("roletype");

                    b.HasKey("Id");

                    b.ToTable("roles", "gradingsystem");
                });

            modelBuilder.Entity("GradingSystems.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<int?>("RolesId")
                        .HasColumnType("integer")
                        .HasColumnName("roles_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("RolesId");

                    b.ToTable("users", "gradingsystem");
                });

            modelBuilder.Entity("GradingSystems.Models.UserSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Github")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("github");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_submissions", "gradingsystem");
                });

            modelBuilder.Entity("GradingSystems.Models.CriteriaToSubmission", b =>
                {
                    b.HasOne("GradingSystems.Models.Criterion", "Criteria")
                        .WithMany("CriteriaToSubmissions")
                        .HasForeignKey("CriteriaId")
                        .IsRequired()
                        .HasConstraintName("fk_criteria");

                    b.HasOne("GradingSystems.Models.UserSubmission", "Submission")
                        .WithMany("CriteriaToSubmissions")
                        .HasForeignKey("SubmissionId")
                        .IsRequired()
                        .HasConstraintName("fk_submission");

                    b.HasOne("GradingSystems.Models.User", "Teacher")
                        .WithMany("CriteriaToSubmissions")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("fk_teacher");

                    b.Navigation("Criteria");

                    b.Navigation("Submission");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("GradingSystems.Models.User", b =>
                {
                    b.HasOne("GradingSystems.Models.Role", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RolesId")
                        .HasConstraintName("fk_roles");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("GradingSystems.Models.UserSubmission", b =>
                {
                    b.HasOne("GradingSystems.Models.User", "User")
                        .WithMany("UserSubmissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GradingSystems.Models.Criterion", b =>
                {
                    b.Navigation("CriteriaToSubmissions");
                });

            modelBuilder.Entity("GradingSystems.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GradingSystems.Models.User", b =>
                {
                    b.Navigation("CriteriaToSubmissions");

                    b.Navigation("UserSubmissions");
                });

            modelBuilder.Entity("GradingSystems.Models.UserSubmission", b =>
                {
                    b.Navigation("CriteriaToSubmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
